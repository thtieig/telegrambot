import os
import subprocess
import time
import telepot
from datetime import datetime
from config import id_a, username, bot_token, password_suffix

bot = telepot.Bot(bot_token)

# Send a startup message with current date and time
startup_chat_id = id_a[0]  # Replace with your chat/phone ID if different
startup_message = f"Hey, just woke up man! It's {datetime.now().strftime('%d %B %Y - %I:%M %p')}"
bot.sendMessage(startup_chat_id, startup_message)

def execute_command(command_list):
    try:
        result = subprocess.check_output(command_list, stderr=subprocess.STDOUT).decode('utf-8')
    except subprocess.CalledProcessError as e:
        result = str(e.output.decode('utf-8'))
    except Exception as e:
        result = f'Error executing command: {str(e)}'
    return result

def handle(msg):
    chat_id = msg['chat']['id']
    command = msg['text'].strip()
    sender = msg['from']['id']
    isbot = msg['from']['is_bot']
    user = msg['from']['username']
    print('Got command: %s' % command)

    if sender in id_a and not isbot and user in username:
        if command.startswith('esegui'):
            # Extract the password and command
            parts = command.split(' ')
            if len(parts) < 3:
                bot.sendMessage(chat_id, 'Invalid command format!')
                return

            date_password = parts[1]
            expected_password = datetime.now().strftime('%Y%m%d') + password_suffix
            if not date_password == expected_password:
                bot.sendMessage(chat_id, 'Unauthorized access attempt!')
                return

            command_to_execute = ' '.join(parts[2:])

            # Generate a temporary script file
            temp_script_path = '/tmp/temp-telegram-script.sh'

            with open(temp_script_path, 'w') as f:
                f.write(f'#!/bin/bash\n\n')
                f.write(f'# Script generated by Telegram bot at {datetime.now()}\n')
                f.write(f'# Command to execute: {command_to_execute}\n')
                f.write(f'{command_to_execute}\n')

            # Make the script executable
            os.chmod(temp_script_path, 0o755)

            # Print debug information
            print(f'Temporary script path: {temp_script_path}')
            print(f'Temporary script content:\n{open(temp_script_path).read()}')

            # Execute the script with sudo and capture the result
            try:
                result = execute_command(['sudo', temp_script_path])

                # Send the result back to Telegram
                bot.sendMessage(chat_id, f'Command execution result:\n\n{result}')
            except Exception as e:
                bot.sendMessage(chat_id, f'Error executing command: {str(e)}')

            # Clean up the temporary script file
            if os.path.exists(temp_script_path):
                os.remove(temp_script_path)

        else:
            command_dict = {
                'uptime': ['uptime'],
                'df': ['df', '-h'],
                'last': ['last'],
                'vpn-restart': ['sudo', 'systemctl', 'restart', 'openvpn.service'],
                'kodi stop': ['sudo', 'manage_kodi', 'off'],
                'kodi start': ['sudo', 'manage_kodi', 'on'],
                'upgrade raspbxino': ['sudo', 'upgrade_raspbxino'],
                'tunnel-ssh': ['/usr/local/bin/ssh-port-forward.sh']
            }

            if command in command_dict:
                result = execute_command(command_dict[command])
                bot.sendMessage(chat_id, result)
            elif command.startswith('restart'):
                cmd = command.split('restart', 1)[1].strip()
                device_dict = {
                    'router': ['sudo', 'restart_device', 'router'],
                    'raspberrino': ['sudo', 'restart_device', 'raspberrino'],
                    'raspbxino': ['sudo', 'restart_device', 'raspbxino']
                }

                if cmd in device_dict:
                    result = execute_command(device_dict[cmd])
                    bot.sendMessage(chat_id, result)
                else:
                    msg = 'Usage: restart (router|raspberrino|raspbxino)'
                    bot.sendMessage(chat_id, msg)
            else:
                msg = 'Commands available:\n' + '\n'.join(command_dict.keys()) + '\nrestart <device>'
                bot.sendMessage(chat_id, msg)
    else:
        bot.sendMessage(chat_id, 'Forbidden access!')

bot.message_loop(handle)
print('I am listening...')

# Clean up the temporary script file at startup if it exists
temp_script_path = '/tmp/temp-telegram-script.sh'
if os.path.exists(temp_script_path):
    os.remove(temp_script_path)

while True:
    try:
        time.sleep(10)
    except KeyboardInterrupt:
        print('\n Program interrupted')
        exit()
    except Exception as e:
        print('Other error or exception occurred:', e)
